public class ProjectTwo{

	public static void main(String args[]){
		String testE = "(3+5)-2";
		System.out.print(BrokenUpAExpression(testE));
	}

	public int findIndexOfExpressionOpperator(String e){
		int positionc = e.indexOf('(', 0);
		boolean foundM = false; 
		int depthlevel = 1; 
		while(foundM == false){
			int nextOpen = e.indexOf('(', positionc);
			int nextClose = e.indexOf(')', positionc);
			if(nextOpen != -1){
				if (nextOpen < nextClose){
					depthlevel++;
					positionc = nextOpen+1;
				}
				else if(nextClose < nextOpen){
					depthlevel--;
					positionc = nextClose+1;
				}
			}
			if(depthlevel==0){
				foundM = true; 
			}
		}
	}

	public String BrokenUpAExpression(String ex){
		String aEx = "";
		int opperationPoint = findIndexOfExpressionOpperator(ex);
		aEx += ex.substring(0,opperationPoint-1);
		aEx += "\n ";
		aEx += ex.charAt(opperationPoint);
		aEx += ex.substring(opperationPoint);
		return aEx;
	}
}

/*

Write a program that takes as input a fully parenthesized, arithmetic expression and converts it to
a binary expression tree, as shown in section 8.2 of the course textbook. Your program should
display the tree in some way and also print the value associated with the root. For an additional
challenge, allow the leaves to store variables of the form x1, x2, x3, and so on, which are initially
0 and which can be updated interactively by your program, with the corresponding update in the
printed value of the root of the expression tree.


You must implement the Tree data structure as given in the course textbook as well as any other
data structures you may use in your program, such as: linked lists, stacks, queues, deques, lists,
and positional lists, instead of the built in version of these data structures in the Java Collections
Framework.

*/